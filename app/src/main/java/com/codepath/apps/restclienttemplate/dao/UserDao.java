package com.codepath.apps.restclienttemplate.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.codepath.apps.restclienttemplate.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InternalId = new Property(0, Long.class, "internalId", true, "INTERNAL_ID");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Screen_name = new Property(3, String.class, "screen_name", false, "SCREEN_NAME");
        public final static Property Profile_image_url = new Property(4, String.class, "profile_image_url", false, "PROFILE_IMAGE_URL");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Followers_count = new Property(6, Integer.class, "followers_count", false, "FOLLOWERS_COUNT");
        public final static Property Favourites_count = new Property(7, Integer.class, "favourites_count", false, "FAVOURITES_COUNT");
        public final static Property Listed_count = new Property(8, Integer.class, "listed_count", false, "LISTED_COUNT");
        public final static Property Profile_background_image_url = new Property(9, String.class, "profile_background_image_url", false, "PROFILE_BACKGROUND_IMAGE_URL");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'INTERNAL_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: internalId
                "'ID' INTEGER," + // 1: id
                "'NAME' TEXT," + // 2: name
                "'SCREEN_NAME' TEXT," + // 3: screen_name
                "'PROFILE_IMAGE_URL' TEXT," + // 4: profile_image_url
                "'LOCATION' TEXT," + // 5: location
                "'FOLLOWERS_COUNT' INTEGER," + // 6: followers_count
                "'FAVOURITES_COUNT' INTEGER," + // 7: favourites_count
                "'LISTED_COUNT' INTEGER," + // 8: listed_count
                "'PROFILE_BACKGROUND_IMAGE_URL' TEXT);"); // 9: profile_background_image_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long internalId = entity.getInternalId();
        if (internalId != null) {
            stmt.bindLong(1, internalId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String screen_name = entity.getScreen_name();
        if (screen_name != null) {
            stmt.bindString(4, screen_name);
        }
 
        String profile_image_url = entity.getProfile_image_url();
        if (profile_image_url != null) {
            stmt.bindString(5, profile_image_url);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        Integer followers_count = entity.getFollowers_count();
        if (followers_count != null) {
            stmt.bindLong(7, followers_count);
        }
 
        Integer favourites_count = entity.getFavourites_count();
        if (favourites_count != null) {
            stmt.bindLong(8, favourites_count);
        }
 
        Integer listed_count = entity.getListed_count();
        if (listed_count != null) {
            stmt.bindLong(9, listed_count);
        }
 
        String profile_background_image_url = entity.getProfile_background_image_url();
        if (profile_background_image_url != null) {
            stmt.bindString(10, profile_background_image_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // internalId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // screen_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // profile_image_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // followers_count
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // favourites_count
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // listed_count
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // profile_background_image_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setInternalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScreen_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProfile_image_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFollowers_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFavourites_count(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setListed_count(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setProfile_background_image_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setInternalId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getInternalId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
